package com.rm.test;


import java.io.PrintWriter;
import java.io.StringWriter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import java.util.Map;

import oracle.apps.fnd.applcore.log.AppsForwardLogger;
import oracle.apps.fnd.applcore.log.AppsLogger;
import oracle.apps.fnd.applcore.messages.ApplcoreException;
import oracle.apps.hcm.common.core.HcmViewObjectImpl;
import oracle.apps.hcm.common.core.logicalrow.HcmFusionLogicalRow;
import oracle.apps.hcm.common.core.logicalrow.HcmLogicalRow;
import oracle.apps.hcm.common.core.logicalrow.HcmLogicalRowStatus;
import oracle.apps.hcm.common.core.logicalrow.HcmPhysicalRow;
import oracle.apps.hcm.common.core.logicalrow.HcmPhysicalRowStatus;
import oracle.apps.hcm.common.core.logicalrow.HcmTargetLogicalRow;
import oracle.apps.hcm.common.core.logicalrow.LogicalRow;

import oracle.apps.hcm.wfm.repositoryLoad.migrationService.applicationModule.TimeLoadServiceAMImpl;

import oracle.apps.hcm.wfm.repositoryLoad.migrationService.exception.LoadMigrationException;
import oracle.apps.hcm.wfm.repositoryLoad.migrationService.util.MigrationConstants;
import oracle.apps.hcm.wfm.repositoryLoad.migrationService.util.MigrationConstants.DL_BUSINESS_OBJS;
import oracle.apps.hcm.wfm.repositoryLoad.protectedModel.util.TimeLoadConstants;

import oracle.apps.hcm.wfm.repositoryLoad.protectedModel.util.TimeLoadConstants.TM_RECORD_ATTRIBUTES;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.client.Configuration;
import oracle.jbo.server.AttributeListImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Mar 22 05:58:58 PDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TimeRecordGroupVOImpl extends HcmViewObjectImpl implements MigrationConstants{
    /**
     * This is the default constructor (do not remove).
     */
    public TimeRecordGroupVOImpl() {
    }
    
           
    @Override
         protected void handleLogicalCreate(HcmTargetLogicalRow targetLogicalRow){
             if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                      AppsLogger.write(this, "handleLogicalCreate:Start( handleLogicalCreate inputParamsTargetLogicalRow = " + targetLogicalRow+")" ,AppsLogger.FINER);
             }
		AttributeList attrListTmRecGrp = new AttributeListImpl();
		attrListTmRecGrp=this.convertTargetLogicalRowToAttributeList(targetLogicalRow);
         TimeLoadServiceAMImpl am = (TimeLoadServiceAMImpl)this.getApplicationModule();
             
              //   (TimeLoadServiceAMImpl)Configuration.createRootApplicationModule("oracle.apps.hcm.wfm.repositoryLoad.migrationService.applicationModule.TimeLoadServiceAM",
              //                                             "TimeLoadServiceAMLocal");
            try {
                        AttributeList createTimeRecordAttribListResult=new AttributeListImpl();
                        
                        createTimeRecordAttribListResult=am.createTimeRecord(attrListTmRecGrp);
                        List<HcmPhysicalRow> targetPhysicalRows = targetLogicalRow.getPhysicalRows();
                            for (int i=0;i<targetPhysicalRows.size();i++){
                                HcmPhysicalRow targetPhysicalRow = targetPhysicalRows.get(i);
                                AttributeList targetAttributes = createTimeRecordAttribListResult;
                                HcmPhysicalRow returnPhysicalRow = targetLogicalRow.findOrCreateReturnPhysicalRow(targetPhysicalRow);
                                HcmLogicalRow returnLogicalRow = targetLogicalRow.getReturnLogicalRow();
                                returnLogicalRow.addPhysicalRow(returnPhysicalRow);
                                AttributeList errorMsgAttribList = (AttributeList)targetAttributes.getAttribute(DL_BUSINESS_OBJS.MSG.valueOf());
                                List<String> errorArrayList=new ArrayList<String>();
                                errorArrayList = (ArrayList<String>)errorMsgAttribList.getAttribute(TM_MESSAGE_ATTRIBUTES.MESSAGE_NAME.valueOf());
                                String exceptionString;
                                Map<String, Object> mapMsgToken = new HashMap<String, Object>();
                                mapMsgToken = (Map<String, Object>)errorMsgAttribList.getAttribute(TM_MESSAGE_ATTRIBUTES.MESSAGE_TOKENS.valueOf());
                                Map<String, Object> mapFirstMsgToken=new HashMap<String, Object>();
                                if(errorArrayList.size()>0){
                                    if (returnPhysicalRow != null) {
                                       // returnPhysicalRow.setStatusValue(HcmPhysicalRowStatus.VALUE.ERROR);
                                        for (String temp : errorArrayList) {
                                             exceptionString=temp;
                                            String exceptionSubString = exceptionString.substring(0,3);
                                            if(mapMsgToken.isEmpty()){
                                                throw new  ApplcoreException(exceptionSubString+":::"+exceptionString);
                                            }
                                            else{
                                                
                                                  throw new  ApplcoreException(exceptionSubString+":::"+exceptionString,mapMsgToken);
                                                
                                            }
                                        }
                                       // targetLogicalRow.setStatusValue(HcmLogicalRowStatus.VALUE.ERROR);
                                    }
                                }
                                else{
                                if (returnPhysicalRow != null) {
                                    returnPhysicalRow.setStatusValue(HcmPhysicalRowStatus.VALUE.SUCCESS);
                                    String[] attrNames = targetAttributes.getAttributeNames();
                                    for (int j=0;j<attrNames.length;j++){
                                        returnPhysicalRow.setAttribute(attrNames[j], targetAttributes.getAttribute(attrNames[j]));
                                    }
                                }
                            }
                        }
          
        }
            catch(ApplcoreException applCoreException){
                Map<String, Object> m = new HashMap<String, Object>();
                m.put("TOKEN1", "ApplcoreException In Handle Logical Create");
                AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(applCoreException)));              
                throw applCoreException;
            }
            catch(RuntimeException runtimeException){
                Map<String, Object> m = new HashMap<String, Object>();
                                        m.put("TOKEN1", "Exception In Handle Logical Create-RunTime");
                                        AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(runtimeException)));                           
                                        throw runtimeException;
            }
            catch(Exception exception){
                Map<String, Object> m = new HashMap<String, Object>();
                m.put("TOKEN1", "Exception In Handle Logical Create");
                AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(exception)));                           
                Map<String, Object> tokens = new HashMap<String, Object>();
                tokens.put("TOKEN1", exception.getMessage());
                throw new ApplcoreException("FND:::FND_DIAGLOG_MESSAGE_3",tokens);                    
            }
             finally {
                 //Configuration.releaseRootApplicationModule(am, false);
                 if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                                   AppsLogger.write(this, "handleLogicalCreate:End" ,AppsLogger.FINER);
                          }
             }
         }
    
    private AttributeList convertTargetLogicalRowToAttributeList(HcmTargetLogicalRow targetLogicalRow){
        if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                 AppsLogger.write(this, "convertTargetLogicalRowToAttributeList:Start( convertTargetLogicalRowToAttributeList inputParamsTargetLogicalRow = " + targetLogicalRow+")" ,AppsLogger.FINER);
        }
        AttributeList attrListTmRecGrp = new AttributeListImpl(); 
        try{
        List<HcmPhysicalRow> physicalRowsTmRecGrp = targetLogicalRow.getPhysicalRows();
            if(physicalRowsTmRecGrp.size()>1){
                throw new ApplcoreException("FND:::FND_CMN_DOCSEQ_SEQ_NOTUNIQUE");
            }
                 
                ArrayList<AttributeList> tmRecordArrayList=new ArrayList<AttributeList> ();
                AttributeList attrListTmRec = new AttributeListImpl(); 
                ArrayList<AttributeList> tmReposArrayList=new ArrayList<AttributeList> ();
                AttributeList attrListTmReposAttribute= new AttributeListImpl(); 
                AttributeList  attrListTmRecGrpAttrib=new AttributeListImpl();
                ArrayList<AttributeList>  tmRecGrpAttribArrayList=new  ArrayList<AttributeList>();
                 for(int i=0;i<physicalRowsTmRecGrp.size();i++)
                 {
                     HcmPhysicalRow TmRecGroupPhysicalRow = physicalRowsTmRecGrp.get(i);
		     attrListTmRecGrp=new AttributeListImpl();
                     attrListTmRecGrp = TmRecGroupPhysicalRow.getAttributes();
                 //Map  map=new HashMap();
               //  Map map=targetLogicalRow.getChilds();
                    List<LogicalRow> listLogicalRowTmRec=targetLogicalRow.getChild(DL_BUSINESS_OBJS.TR.valueOf());
                     tmRecordArrayList=new ArrayList<AttributeList>();
                     if (listLogicalRowTmRec!=null){
                         if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                                  AppsLogger.write(this, "convertTargetLogicalRowToAttributeList:Traversing Time Record (List<LogicalRow>) " + listLogicalRowTmRec+")" ,AppsLogger.FINER);
                         }
                     Iterator<LogicalRow> iteratorTmRec = listLogicalRowTmRec.iterator();
                                     while (iteratorTmRec.hasNext()) {
                                         HcmTargetLogicalRow logicalRowTmRec = (HcmTargetLogicalRow)iteratorTmRec.next();
                                         List<HcmPhysicalRow> physicalRowsTmRec=logicalRowTmRec.getPhysicalRows();
                                         if(physicalRowsTmRec.size()>1){
                                             throw new ApplcoreException("FND:::FND_CMN_DOCSEQ_SEQ_NOTUNIQUE");
                                         }
                                         for(int j=0;j<physicalRowsTmRec.size();j++){
                                             HcmPhysicalRow TmRecPhysicalRow = physicalRowsTmRec.get(j);
                                             attrListTmRec=TmRecPhysicalRow.getAttributes();
                                             
                                             Map mapTmRec=logicalRowTmRec.getChilds();
                                             if (mapTmRec!=null){
                                                 if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                                                          AppsLogger.write(this, "convertTargetLogicalRowToAttributeList:Traversing Time Repository Attribute Coresponding to Time Record  " + mapTmRec+")" ,AppsLogger.FINER);
                                                 }
                                             Iterator<Map.Entry<String, List<LogicalRow>>> multipleEntryTmRec = mapTmRec.entrySet().iterator();
                                             tmReposArrayList=new ArrayList<AttributeList> ();
                                             //for (Map.Entry<String, List<LogicalRow>> entryTmRec : mapTmRec.entrySet()) {
                                             while (multipleEntryTmRec.hasNext()) {
                                                 Map.Entry<String, List<LogicalRow>> entryTmRec = multipleEntryTmRec.next();
                                                 if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                                                          AppsLogger.write(this, "convertTargetLogicalRowToAttributeList:Value Of Time Repository Attribute Coresponding to Time Record  " + entryTmRec.getValue()+")" ,AppsLogger.FINER);
                                                 }
                                                                List<LogicalRow> listLogicalRowTmReposAttrib=entryTmRec.getValue();
                                                                Iterator<LogicalRow> iteratorTmReposAttrib = listLogicalRowTmReposAttrib.iterator();
                                                                 while (iteratorTmReposAttrib.hasNext()) {
                                                                        // System.out.println(iteratorTmReposAttrib.next());
                                                                    HcmTargetLogicalRow logicalRowTmReposAttrib = (HcmTargetLogicalRow)iteratorTmReposAttrib.next();
                                                                     List<HcmPhysicalRow> physicalRowsTmReposAttrib=logicalRowTmReposAttrib.getPhysicalRows();
                                                                     if(physicalRowsTmReposAttrib.size()>1){
                                                                         throw new ApplcoreException("FND:::FND_CMN_DOCSEQ_SEQ_NOTUNIQUE");
                                                                     }
                                                                     for(int k=0;k<physicalRowsTmReposAttrib.size();k++){
                                                                         HcmPhysicalRow TmReposAttribPhysicalRow = physicalRowsTmReposAttrib.get(k);
                                                                         attrListTmReposAttribute=TmReposAttribPhysicalRow.getAttributes(); 
                                                                        tmReposArrayList.add(attrListTmReposAttribute);
                                                                     }
                                                                 }
                                             }
                                             attrListTmRec.setAttribute(DL_BUSINESS_OBJS.TRA.valueOf(), tmReposArrayList);
                                             tmRecordArrayList.add(attrListTmRec);
                                         }
                                         }
                                     }
                 attrListTmRecGrp.setAttribute(DL_BUSINESS_OBJS.TR.valueOf(), tmRecordArrayList);
                     }
                     
                 List<LogicalRow> listLogicalRowTmRecGrpAttrib=targetLogicalRow.getChild(DL_BUSINESS_OBJS.TRGA.valueOf()); 
                     tmRecGrpAttribArrayList=new ArrayList<AttributeList>();
                  if (listLogicalRowTmRecGrpAttrib!=null){
                      if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                               AppsLogger.write(this, "convertTargetLogicalRowToAttributeList:Traversing Time Record Group Attribute(List<LogicalRow>) " + listLogicalRowTmRecGrpAttrib+")" ,AppsLogger.FINER);
                      }
                  Iterator<LogicalRow> iteratorTmRecGrpAttrib = listLogicalRowTmRecGrpAttrib.iterator();
                                  while (iteratorTmRecGrpAttrib.hasNext()) {
                                      HcmTargetLogicalRow logicalRowTmRecGrpAttrib = (HcmTargetLogicalRow)iteratorTmRecGrpAttrib.next();
                                      List<HcmPhysicalRow> physicalRowsTmReGrpAttrib=logicalRowTmRecGrpAttrib.getPhysicalRows();
                                      if(physicalRowsTmReGrpAttrib.size()>1){
                                          throw new ApplcoreException("FND:::FND_CMN_DOCSEQ_SEQ_NOTUNIQUE");
                                      }
                                      for(int countTmRecGrpAttrib=0;countTmRecGrpAttrib<physicalRowsTmReGrpAttrib.size();countTmRecGrpAttrib++){
                                          HcmPhysicalRow tmRecGrpAttribPhysicalRow = physicalRowsTmReGrpAttrib.get(countTmRecGrpAttrib);
                                          attrListTmRecGrpAttrib=tmRecGrpAttribPhysicalRow.getAttributes();
                                        tmRecGrpAttribArrayList.add(attrListTmRecGrpAttrib);
                                      }
                                  }
                 attrListTmRecGrp.setAttribute(DL_BUSINESS_OBJS.TRGA.valueOf(), tmRecGrpAttribArrayList);             
             }
                 }
                }
                catch(ApplcoreException applCoreException){
                                   Map<String, Object> m = new HashMap<String, Object>();
                                   m.put("TOKEN1", "ApplcoreException In Convert Target Logical Row To AttributeList");
                                   AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(applCoreException))); 
                                   throw applCoreException;
                }
                catch(Exception e){
                                            Map<String, Object> m = new HashMap<String, Object>();
                                            m.put("TOKEN1", "Exception While Converting Target LogicalRow To AttributeList");
                                            AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(e)));                           
                                            Map<String, Object> tokens = new HashMap<String, Object>();
                                            tokens.put("TOKEN1", e.getMessage());
                                            throw new ApplcoreException("FND:::FND_DIAGLOG_MESSAGE_3",tokens);
                }
                 return attrListTmRecGrp;
    }
	
    //Custom Correction Implementation
    @Override
    protected void handleLogicalCorrection(HcmTargetLogicalRow targetLogicalRow){
        if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                 AppsLogger.write(this, "handleLogicalCorrection:Start( handleLogicalCorrection inputParamsTargetLogicalRow = " + targetLogicalRow+")" ,AppsLogger.FINER);
        }
		AttributeList attrListTmRecGrp = new AttributeListImpl();
		attrListTmRecGrp=this.convertTargetLogicalRowToAttributeList(targetLogicalRow);
        TimeLoadServiceAMImpl am = (TimeLoadServiceAMImpl)this.getApplicationModule();
           // (TimeLoadServiceAMImpl)Configuration.createRootApplicationModule("oracle.apps.hcm.wfm.repositoryLoad.migrationService.applicationModule.TimeLoadServiceAM",
           //                                           "TimeLoadServiceAMLocal");
       try {
	   am.updateTimeRecord(attrListTmRecGrp);
        }  
        catch(ApplcoreException applCoreException){
                        Map<String, Object> m = new HashMap<String, Object>();
                                        m.put("TOKEN1", "ApplcoreException In Handle Logical Correction");
                                        AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(applCoreException)));              
                                        throw applCoreException;
                    }
                    catch(RuntimeException runtimeException){
                        Map<String, Object> m = new HashMap<String, Object>();
                                                m.put("TOKEN1", "Exception In Handle Logical Correction(Update)-RunTime");
                                                AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(runtimeException)));                           
                                                throw runtimeException;
                    }
                    catch(Exception exception){
                        Map<String, Object> m = new HashMap<String, Object>();
                                                m.put("TOKEN1","Exception In Handle Logical Correction(Update)" );
                                                AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(exception)));                           
                                                Map<String, Object> tokens= new HashMap<String, Object>();
                                                tokens.put("TOKEN1", exception.getMessage());
                                                throw new ApplcoreException("FND:::FND_DIAGLOG_MESSAGE_3",tokens);
                    }
                     finally {
                         if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                                           AppsLogger.write(this, "handleLogicalCorrection:End" ,AppsLogger.FINER);
                                  }
                     }
    }  

    //Custom ZAP Implementation
    @Override
    protected void handleLogicalZap(HcmTargetLogicalRow targetLogicalRow){
        if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                 AppsLogger.write(this, "handleLogicalZap:Start( handleLogicalZap inputParamsTargetLogicalRow = " + targetLogicalRow+")" ,AppsLogger.FINER);
        }
		AttributeList attrListTmRecGrp = new AttributeListImpl();
		attrListTmRecGrp=this.convertTargetLogicalRowToAttributeList(targetLogicalRow);
       TimeLoadServiceAMImpl am = (TimeLoadServiceAMImpl)this.getApplicationModule();
          //  (TimeLoadServiceAMImpl)Configuration.createRootApplicationModule("oracle.apps.hcm.wfm.repositoryLoad.migrationService.applicationModule.TimeLoadServiceAM",
          //                                            "TimeLoadServiceAMLocal");
       try {
           am.deleteTimeRecord(attrListTmRecGrp);  
        }
            catch(ApplcoreException applCoreException){
                            Map<String, Object> m = new HashMap<String, Object>();
                                            m.put("TOKEN1", "ApplcoreException In Handle Logical Zap");
                                            AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(applCoreException)));              
                                            throw applCoreException;
                        }
                        catch(RuntimeException runtimeException){
                            Map<String, Object> m = new HashMap<String, Object>();
                                                    m.put("TOKEN1", "Exception In Handle Logical Zap-RunTime");
                                                    AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(runtimeException)));                           
                                                    throw runtimeException;
                        }
                        catch(Exception exception){
                            Map<String, Object> m = new HashMap<String, Object>();
                            m.put("TOKEN1", "Exception In Handle Logical Zap");
                            AppsLogger.createIncident(this, "FND", "FND_DIAGLOG_INC_ASYNC_OK", m, new LoadMigrationException(getStackTrace(exception)));                           
                            Map<String, Object> tokens= new HashMap<String, Object>();
                            tokens.put("TOKEN1", exception.getMessage());
                            throw new ApplcoreException("FND:::FND_DIAGLOG_MESSAGE_3",tokens);
                        }
                         finally {
                             if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                                               AppsLogger.write(this, "handleLogicalZap:End" ,AppsLogger.FINER);
                                      }
        }
    }  

    //Custom Logical Update Implementation
    @Override
    protected void handleLogicalUpdate(HcmTargetLogicalRow hcmTargetLogicalRow){
        if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                 AppsLogger.write(this, "handleLogicalUpdate:Start( handleLogicalUpdate inputParamsHcmTargetLogicalRow = " + hcmTargetLogicalRow+")" ,AppsLogger.FINER);
        }
        handleLogicalCorrection(hcmTargetLogicalRow);
    }
    
    @Override
       protected boolean hasCustomizedCRUDOperations(LogicalRow logicalRow) {
           if (AppsLogger.isEnabled(AppsLogger.FINER)) { 
                    AppsLogger.write(this, "hasCustomizedCRUDOperations:Start( hasCustomizedCRUDOperations inputParamsLogicalRow = " + logicalRow+")" ,AppsLogger.FINER);
           }
           return true;
       }
    
    @Override
        protected void populateFusionLogicalRow(HcmFusionLogicalRow fusionLogicalRow,
                                                HcmLogicalRow sourceLogicalRow) {
            if (AppsLogger.isEnabled(AppsLogger.FINER)) {
                AppsLogger.write(this,"populateFusionLogicalRow:Start()", AppsLogger.FINER);
            }
            
            List<HcmPhysicalRow> physicalRows = sourceLogicalRow.getPhysicalRows();
            if ((physicalRows != null) && (physicalRows.size() > 0)) {
                HcmPhysicalRow physicalRow = physicalRows.get(0);
                AttributeList attList = physicalRow.getAttributes();
                TimeLoadServiceAMImpl am = (TimeLoadServiceAMImpl)this.getApplicationModule();
                AttributeList fusionAttrs = am.getFusionRowsAttributeList(attList);
                List<HcmPhysicalRow> fusionPhysicalRowList = fusionLogicalRow.getPhysicalRows();
                HcmPhysicalRow fusionPhysicalRow;
                if (!(fusionAttrs.getAttributeCount()==0)) {
                    fusionPhysicalRow = new HcmPhysicalRow(fusionLogicalRow);
                    fusionPhysicalRow.setAttribute(TM_RECORD_GROUP_ATTRIBUTES.TM_REC_GRP_ID.valueOf(), 
                                               fusionAttrs.getAttribute(TM_RECORD_GROUP_ATTRIBUTES.TM_REC_GRP_ID.valueOf()));
                fusionLogicalRow.addPhysicalRow(fusionPhysicalRow);
                if (AppsLogger.isEnabled(AppsLogger.FINER)) {
                    AppsLogger.write(this,"populateFusionLogicalRow:Case Of Update", AppsLogger.FINER);
                }  
            }  
        }
        if (AppsLogger.isEnabled(AppsLogger.FINER)) {
            AppsLogger.write(this,"populateFusionLogicalRow:End()", AppsLogger.FINER);
        }
        
    }
    private String getStackTrace(Throwable t) {
        String s = null;
        StringWriter sw = new StringWriter();
        PrintWriter pw = new PrintWriter(sw);
        t.printStackTrace(pw);
        return sw.toString();        
    }
}
